// Mocks generated by Mockito 5.0.12 from annotations
// in marvel_flutter/test/presentation/detail/hero_detail_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:marvel_flutter/core/error_handler/failures.dart' as _i6;
import 'package:marvel_flutter/domain/entities/entities.dart' as _i7;
import 'package:marvel_flutter/domain/repository/repository.dart' as _i2;
import 'package:marvel_flutter/domain/use_case/hero_detail_user_case.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeRepository extends _i1.Fake implements _i2.Repository {}

class _FakeEither<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [HeroDetailUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockHeroDetailUseCase extends _i1.Mock implements _i4.HeroDetailUseCase {
  MockHeroDetailUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeRepository()) as _i2.Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.HeroEntity>> call(
          _i4.Params? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i6.Failure, _i7.HeroEntity>>.value(
              _FakeEither<_i6.Failure, _i7.HeroEntity>())) as _i5
          .Future<_i3.Either<_i6.Failure, _i7.HeroEntity>>);
}
