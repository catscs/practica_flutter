// Mocks generated by Mockito 5.0.12 from annotations
// in marvel_flutter/test/domain/use_case/hero_detail_use_case_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:marvel_flutter/core/error_handler/error_handler.dart' as _i5;
import 'package:marvel_flutter/domain/entities/entities.dart' as _i6;
import 'package:marvel_flutter/domain/repository/repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository extends _i1.Mock implements _i3.Repository {
  MockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.HeroEntity>>> getHeroes(
          int? offset, int? limit) =>
      (super.noSuchMethod(Invocation.method(#getHeroes, [offset, limit]),
              returnValue:
                  Future<_i2.Either<_i5.Failure, List<_i6.HeroEntity>>>.value(
                      _FakeEither<_i5.Failure, List<_i6.HeroEntity>>()))
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.HeroEntity>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.HeroEntity>> getHero(int? id) =>
      (super.noSuchMethod(Invocation.method(#getHero, [id]),
          returnValue: Future<_i2.Either<_i5.Failure, _i6.HeroEntity>>.value(
              _FakeEither<_i5.Failure, _i6.HeroEntity>())) as _i4
          .Future<_i2.Either<_i5.Failure, _i6.HeroEntity>>);
}
