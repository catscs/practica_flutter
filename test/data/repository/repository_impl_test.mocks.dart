// Mocks generated by Mockito 5.0.12 from annotations
// in marvel_flutter/test/data/repository/repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:marvel_flutter/core/connectivity/connectivity_provider.dart'
    as _i8;
import 'package:marvel_flutter/core/error_handler/error_handler.dart' as _i6;
import 'package:marvel_flutter/data/data_source/local_data_source.dart' as _i7;
import 'package:marvel_flutter/data/data_source/remote_data_source.dart' as _i4;
import 'package:marvel_flutter/data/model/hero_data_model.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeHeroDataModel extends _i1.Fake implements _i3.HeroDataModel {}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i4.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i3.HeroDataModel>>> getHeroes(
          int? offset, int? limit) =>
      (super.noSuchMethod(Invocation.method(#getHeroes, [offset, limit]),
          returnValue:
              Future<_i2.Either<_i6.Failure, List<_i3.HeroDataModel>>>.value(
                  _FakeEither<_i6.Failure, List<_i3.HeroDataModel>>())) as _i5
          .Future<_i2.Either<_i6.Failure, List<_i3.HeroDataModel>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i3.HeroDataModel>> getHero(int? id) =>
      (super.noSuchMethod(Invocation.method(#getHero, [id]),
          returnValue: Future<_i2.Either<_i6.Failure, _i3.HeroDataModel>>.value(
              _FakeEither<_i6.Failure, _i3.HeroDataModel>())) as _i5
          .Future<_i2.Either<_i6.Failure, _i3.HeroDataModel>>);
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i7.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.HeroDataModel>> getHeroes() =>
      (super.noSuchMethod(Invocation.method(#getHeroes, []),
              returnValue:
                  Future<List<_i3.HeroDataModel>>.value(<_i3.HeroDataModel>[]))
          as _i5.Future<List<_i3.HeroDataModel>>);
  @override
  _i5.Future<void> clearData() =>
      (super.noSuchMethod(Invocation.method(#clearData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> saveHeroes(List<_i3.HeroDataModel>? heroDataModels) =>
      (super.noSuchMethod(Invocation.method(#saveHeroes, [heroDataModels]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i3.HeroDataModel> getHero(int? id) => (super.noSuchMethod(
          Invocation.method(#getHero, [id]),
          returnValue: Future<_i3.HeroDataModel>.value(_FakeHeroDataModel()))
      as _i5.Future<_i3.HeroDataModel>);
}

/// A class which mocks [ConnectivityProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityProvider extends _i1.Mock
    implements _i8.ConnectivityProvider {
  MockConnectivityProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get isNetworkAvailable =>
      (super.noSuchMethod(Invocation.getter(#isNetworkAvailable),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}
